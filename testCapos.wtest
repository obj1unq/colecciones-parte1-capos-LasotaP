import capos.*

describe "rolando" {
  test "rolando encuentra la espada del destino (la agarra)" {
        rolando.encontrar(espada)
        rolando.encontrar(libro)
        rolando.encontrar(collar)
        // assert.equals(2 , rolando.mochila().size())
        //assert.equals([espada,libro], rolando.mochila())
        assert.equals(#{libro,espada}, rolando.mochila())

  }

    test "ir a la casa" {
        rolando.encontrar(espada)
        rolando.encontrar(libro)
        rolando.llegarAHogar()

        //assert.that(rolando.tieneArtefactos()) // OPCIONAL
        //assert.equals(#{}, rolando.mochila())
        assert.that(rolando.mochila().isEmpty())

        rolando.encontrar(collar)
        rolando.llegarAHogar()
        assert.equals(#{espada,libro,collar}, castillo.almacen())
    }

    test "posesiones" {
      castillo.almacen(#{collar,espada}) // esto lo puedo hacer solo porque tengo un "var propety" si fuese "const" no lo puedo hacer, porque no puedo modificar de esta manera deberia hacerlo mediante un metodo, en este caso "castillo.almacenar(#{collar,espada})"
      rolando.mochila(#{armadura})

      assert.equals(#{collar, espada, armadura}, rolando.posesiones())
      assert.notThat(rolando.posee(libro))
      assert.that(rolando.posee(collar))
      assert.that(rolando.posee(armadura))
      assert.that(rolando.posee(espada))
    }

    test "historial" {
      rolando.encontrar(espada)
      rolando.encontrar(libro)
      rolando.encontrar(collar)
      rolando.llegarAHogar()
      rolando.encontrar(armadura)
      rolando.encontrar(collar)

      assert.equals([espada,libro,collar,armadura,collar], rolando.historial())

      assert.equals( armadura ,rolando.artefactoEnHistorial(3)) // eligo si quiero contar de 0 o de 1, en este caso es desde 0
    }


}